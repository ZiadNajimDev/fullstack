name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: usersdb_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        npm install cross-env --save-dev
    
    - name: Initialize database
      env:
        DB_HOST: localhost
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: usersdb_test
        DB_PORT: 3306
      run: |
        cd backend
        # Create the database schema
        node ./scripts/init-db.js || node -e "
          const mysql = require('mysql2/promise');
          
          async function setupDB() {
            const connection = await mysql.createConnection({
              host: process.env.DB_HOST,
              user: process.env.DB_USER,
              password: process.env.DB_PASSWORD,
              database: process.env.DB_NAME,
              port: process.env.DB_PORT
            });
            
            console.log('Creating users table...');
            await connection.query(\`
              CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL UNIQUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              )
            \`);
            
            console.log('Database initialized successfully!');
            await connection.end();
          }
          
          setupDB().catch(err => {
            console.error('Database initialization failed:', err);
            process.exit(1);
          });
        "
        
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: usersdb_test
        DB_PORT: 3306
      run: |
        cd backend
        npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ziadnajim
        password: dckr_pat_rOhgGghc6tRNYu30P8N0vRsy7gE
    
    - name: Build and push
      env:
        DOCKER_HUB_USERNAME: ziadnajim
      run: |
        # Using Docker Compose V2 syntax (which is available by default on GitHub Actions runners)
        docker compose -f docker-compose.prod.yml build
        docker compose -f docker-compose.prod.yml push